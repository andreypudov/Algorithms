!
! The Laboratory of Algorithms
!
! The MIT License
!
! Copyright 2011-2015 Andrey Pudov.
!
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the 'Software'), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
!
! The above copyright notice and this permission notice shall be included in
! all copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
! THE SOFTWARE.
!

! Even Fibonacci numbers
!
! Each new term in the Fibonacci sequence is generated by adding the previous
! two terms. By starting with 1 and 2, the first 10 terms will be:
!                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
! By considering the terms in the Fibonacci sequence whose values do not exceed
! four million, find the sum of the even-valued terms.
module MPEProblem2

    implicit none
    private

    type, public :: TPEProblem2
    contains
        procedure, nopass :: present
    end type
contains
    subroutine present
        write (*, '(A)') 'Problem 2. Even Fibonacci numbers.'

        write (*, '(A, I)') 'Even 1: ', even1()
        write (*, '(A, I)') 'Even 2: ', even2()
    end subroutine

    ! A direct translation of the problem statement
    function even1()
        integer even1
        integer prev
        integer cur
        integer temp

        ! initial values
        even1 = 0
        prev  = 1
        cur   = 1
        temp  = 0

        do while (cur <= 4000000)
            if (mod(cur, 2) .eq. 0) then
                even1 = even1 + cur
            end if

            temp = cur
            cur  = cur + prev
            prev = temp
        end do
    end function

    ! only every third number is added
    function even2()
        integer even2
        integer prev
        integer cur
        integer temp

        ! initial values
        even2 = 0
        prev  = 1
        cur   = 1
        temp  = prev + cur

        do while (temp < 4000000)
            even2 = even2 + temp
            prev  = cur   + temp
            cur   = temp  + prev
            temp  = prev  + cur
        end do
    end function
end module
