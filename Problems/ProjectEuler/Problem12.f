!
! The Laboratory of Algorithms
!
! The MIT License
!
! Copyright 2011-2015 Andrey Pudov.
!
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the 'Software'), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
!
! The above copyright notice and this permission notice shall be included in
! all copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
! THE SOFTWARE.
!

! Highly divisible triangular number
!
! The sequence of triangle numbers is generated by adding the natural numbers.
! So the 7th trianlge number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
! ten terms would be:
!
!    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
!
! Let us list the factors of the first seven triangle numbers:
!     1: 1
!     3: 1, 3
!     6: 1, 2, 3, 6
!    10: 1, 2, 5, 10
!    15: 1, 3, 5, 15
!    21: 1, 3, 7, 21
!    28: 1, 2, 4, 7, 14, 28
!
! We can see that 28 is the first triangle number to have over five divisirs.
! What is the value of the first triangle number to have over five hundred divisors?
module MPEProblem12

    implicit none
    private

    type, public :: TPEProblem12
    contains
        procedure, nopass :: present
    end type
contains
    subroutine present
        write (*, '(A)') 'Problem 12. Highly divisible triangular number.'

        write (*, '(A, I)') 'Triangle 1: ', triangle1()
    end subroutine

    pure function triangle1()
        integer*8 triangle1

        integer number
        integer base
        integer divisors

        ! initial values
        triangle1 = 1
        number    = 1

        do while (.true.)
            divisors = 0
            do base = 1, sqrt(real(triangle1))
                if (mod(triangle1, base) .eq. 0) then
                    divisors = divisors + 1
                end if
            end do

            ! the number of divisors is two times less in case of sqr
            if (divisors .ge. 250) then
                return
            end if

            number    = number + 1
            triangle1 = triangle1 + number
        end do
    end function
end module
